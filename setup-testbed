#!/bin/bash

# Creates 3 machine Azure testbed

if [ $# -eq 0 ]; then
    echo "Usage: $0 basename [region] [size]"
    exit 1
fi

baseName=$1
location=${2:-$AZURE_LOCATION}
Sku=${3:-D8s_v3}

if [ -z "$AZURE_USER" ]; then
    echo "AZURE_USER not set"
    exit 1
fi
user=$AZURE_USER

location=$AZURE_LOCATION
if [ -z "$location" ]; then
    echo "AZURE_LOCATION not set"
    exit 1
fi

# normal authentication is with ssh not paswords
pubKey=$AZURE_SSH_KEY

ubuntuImage="Canonical:UbuntuServer:18.10:latest"
vmSize=Standard_${Sku}

rg=$user-$baseName-rg
vnet=$baseName-vnet
nsgName=$baseName-nsg
storageName=$user$baseName
subFront=$baseName-front
subBack=$baseName-back
adminUsername=azure-user
adminPassword=$(pwgen -cny 13 1)

# All commands must succeed
set -e

# create group / network / nsg 
az group create --name $rg \
   --location $location

az network vnet create -g $rg \
   --name $vnet --address-prefix 172.16.0.0/16 \
   --subnet-name $subFront \
   --subnet-prefix 172.16.1.0/24

az network vnet subnet create -g $rg \
   --vnet-name $vnet --name $subBack \
   --address-prefix 172.16.2.0/24

az network nsg create --resource-group $rg \
  --name $nsgName

az network nsg rule create --resource-group  $rg \
  --nsg-name $nsgName --name allow-ssh \
  --protocol tcp --direction inbound --priority 1000 --source-address-prefix '*' \
  --source-port-range '*' --destination-address-prefix '*' --destination-port-range 22 \
  --access allow

az storage account create --resource-group $rg \
   --name $storageName \
   --location $location \
   --sku Standard_LRS --kind StorageV2

## bastion server 
vmPrefix=bastion1
vmSizeBastion=Standard_B1s
baseNameBastion=$vmPrefix
imageName=$ubuntuImage
publicIp=pip-$baseName
vNic=nic-$baseNameBastion

echo "Creating Bastion Server: $baseNameBastion"

az network public-ip create --resource-group $rg \
    --name $publicIp --allocation-method static --idle-timeout 4

az network nic create \
    -n $vNic \
    -g $rg \
    --subnet $subFront \
    --network-security-group $nsgName \
    --public-ip-address $publicIp \
    --vnet-name $vnet 

az vm create \
    -g $rg \
    --os-disk-name osdisk-$baseNameBastion \
    --name vm-$baseNameBastion \
    --nics $vNic \
    --storage-sku premium_lrs \
    --size $vmSizeBastion \
    --image $imageName \
    --admin-username $adminUsername \
    --authentication-type ssh \
    --ssh-key-value "@$pubKey"

echo "-----------------------------------------------" 
echo "Bastion Server: $baseNameBastion done "
echo "-----------------------------------------------" 

# Ubuntu ACC
vmPrefix=ubuntu-acc
accNet=true
imageName=$ubuntuImage

for i in {1..2}; 
do
    baseNameLoop=$vmPrefix$i
    nic1=nic1-${baseNameLoop}
    nic2=nic2-${baseNameLoop}
    echo "Initing $baseNameLoop . Image: $imageName"

    az network nic create -g $rg \
       --name $nic1 \
       --vnet $vnet \
       --subnet $subFront \
       --network-security-group $nsgName
       
    az network nic create -g $rg \
       --name $nic2 \
       --vnet $vnet \
       --subnet $subBack \
       --network-security-group $nsgName \
       --accelerated-networking true

    az vm create \
        -g $rg \
        --os-disk-name osdisk-$baseNameLoop \
        --name vm-$baseNameLoop \
        --nics $nic1 $nic2 \
	--no-wait \
        --storage-sku premium_lrs \
        --size $vmSize \
        --image $imageName \
	--authentication-type all \
        --admin-username $adminUsername \
        --admin-password "$adminPassword"
        
    echo -e "Vm $baseNameLoop created. Initing scripts"
    az vm extension set -g $rg --vm-name vm-$baseNameLoop \
       --name customScript \
       --publisher Microsoft.Azure.Extensions \
       --settings '{"fileUris": ["https://raw.githubusercontent.com/shemminger/azure-testbed/master/install-dpdk.sh"],"commandToExecute": "bash install-dpdk.sh"}'
    
    echo "Vm $baseNameLoop created."
    echo "-----------------------------------------------" 
done

# Enable boot diagnostics
az vm boot-diagnostics enable --storage $storageName \
   --ids $(az vm list -g $rg --query "[].id" -o tsv)

# Display result
echo -n 'public ip: '
az network public-ip list -g $rg \
	       --query "[].{ip:ipAddress, vm:name}" | \
	python -c 'import sys,json;print(json.load(sys.stdin)[0]["ip"])'
	    
echo "user: $adminUsername passwd: $adminPassword"
